{"version":3,"sources":["helpers/dataHelpers.js","enums/gameEnums.js","helpers/gameSnakeHelpers.js","enums/actionEnums.js","stores/actions/appStateAction.js","stores/actions/gameStateAction.js","game/BoardComponentGeneral.jsx","game/BoardContainer.jsx","stores/actions/business/gameBusinessAction.js","components/inputs/InputRange.jsx","game/BoardHeader.jsx","App.js","serviceWorker.js","stores/reducers/appState.js","stores/reducers/gameState.js","stores/reducers/index.js","index.js"],"names":["range","start","end","array","i","push","arrayToString","result","forEach","item","GameEnums","Object","freeze","X","Y","dPattern","x","y","dFunc","doEatFood","snakePosition","move","boardSize","setFoodPosition","setSnakePosition","moveX","moveY","generateFoodPosition","length","gapPattern","position1","position2","patternToString","pattern","incrementPattern","type","gameEnums","increment","newPattern","checkEatTarget","targetPosition","targetPositionX","targetPositionY","isEqualPattern","pattern1","pattern2","indexOfPattern","patternSearch","allPattern","findIndex","followingHeader","headerPosition","snakePositionTemp","foodPosition","Math","floor","random","getMoveExcept","visitedPosition","headSnake","headSnakeX","headSnakeY","headSnakeTemp","except","checkOutsideBoardSize","position","moveNext","headPosition","nextMove","nextMoveReverse","moveXP1","assign","moveXM1","moveYP1","moveYM1","moveXNextDefault","moveXNext","moveYNext","gapX","abs","gapY","ActionEnums","APP_STATE_SET_START_GAME","GAME_STATE_SET_BOARD_SIZE","GAME_STATE_SET_FOOD_POSITION","GAME_STATE_SET_SNAKE_POSITION","setStartGame","startGame","actionEnums","setBoarSize","connect","state","gameState","appState","dispatch","appStateAction","bindActionCreators","gameStateAction","React","memo","props","useState","setBoardSize","timerInterval","setMoveX","setMoveY","history","setHistory","levelEat","setLevelEat","styleBoardContainer","gridTemplateColumns","map","generateGrid","useEffect","obj","dfsStep","snakePositionForRender","checkPositionSnake","positionX","positionY","check","splice","data","interval","nextStep","currentPosition","step","visited","moveAll","snakePositionOriginal","foodPositionTemp","historyTemp","eatFood","allStep","setSnakePositionTemp","setSnakePositionOriginal","setFoodPositionTemp","prevStep","last","followingTail","pop","setDefault","newSnake","newFood","shift","console","log","JSON","stringify","setInterval","clearInterval","movingNext","head","indexFind","index","checkEatBody","checkPositionFood","onKeyDown","e","keyCode","controlMove","className","style","tabIndex","indexY","indexX","key","children","restartGame","getState","batch","generatedFoodPosition","disabled","min","max","value","onChange","label","gameBusinessAction","target","Button","onClick","App","BoardComponentGeneral","Boolean","window","location","hostname","match","init","action","combineReducers","store","createStore","rootStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9ea8a054.chunk.js","sourcesContent":["export const range = (start = 0, end = 0, increment = 1) => {\r\n    let array = []\r\n    if (!end) {\r\n        for(let i = 0; i < start; i++) {\r\n            array.push(i)\r\n        }\r\n    } else if (end !== 0) {\r\n        for(let i = start; i < end; i++) {\r\n            array.push(i)\r\n        }\r\n    }\r\n\r\n    return array\r\n}\r\n\r\nexport const last = (obj = []) => {\r\n    if (obj.length === 0) return null\r\n    return obj[obj.length - 1]\r\n}\r\n\r\nexport const arrayToString = (array = []) => {\r\n    let result = \"\"\r\n    array.forEach((item) => result += item)\r\n    return result\r\n}","const GameEnums = Object.freeze({\r\n    X: \"x\",\r\n    Y: \"y\",\r\n});\r\n\r\nexport default GameEnums;","import { arrayToString, range } from \"./dataHelpers\"\r\nimport gameEnums from \"../enums/gameEnums\"\r\n\r\nexport const dPattern = {x: 0, y: 0}\r\nconst dFunc = () => {}\r\n\r\nexport const generateGrid = (boardSize = 0) => {\r\n    return {\r\n        gridTemplateColumns: arrayToString(range(boardSize).map((item) => \"auto \"))\r\n    }\r\n}\r\n\r\nexport const doEatFood = (snakePosition = dPattern, move = dPattern, boardSize = 0, setFoodPosition = dFunc, setSnakePosition = dFunc) => {\r\n    const { x: moveX, y: moveY } = move\r\n    setFoodPosition(generateFoodPosition(snakePosition, boardSize))\r\n    snakePosition.push({\r\n        x: snakePosition[snakePosition.length - 1].x - moveX,\r\n        y: snakePosition[snakePosition.length - 1].y - moveY,\r\n    })\r\n    setSnakePosition(snakePosition)\r\n}\r\n\r\nexport const gapPattern = (position1 = dPattern, position2 = dPattern) => {\r\n    return {\r\n        x: position2.x - position1.x,\r\n        y: position2.y - position1.y,\r\n    }\r\n}\r\n\r\nexport const patternToString = (pattern = dPattern) => {\r\n    return `x${pattern.x}y${pattern.y}`\r\n}\r\n\r\nexport const incrementPattern = (pattern, type = gameEnums.X, increment = 1) => {\r\n    let newPattern = {...pattern}\r\n    switch(type) {\r\n        case gameEnums.X:\r\n            newPattern.x += increment\r\n            break;\r\n        case gameEnums.Y:\r\n            newPattern.y += increment\r\n            break;\r\n        default:\r\n            break\r\n    }\r\n    return newPattern\r\n}\r\n\r\nexport const checkEatTarget = (snakePosition = dPattern, targetPosition = dPattern) => {\r\n    const { x: targetPositionX, y: targetPositionY } = targetPosition\r\n\r\n    if (targetPositionX === snakePosition[0].x && targetPositionY === snakePosition[0].y) \r\n        return true\r\n\r\n    return false\r\n}\r\n\r\nexport const checkEatBody = (snakePosition = dPattern) => {\r\n    const [ head ] = snakePosition\r\n    let indexFind = snakePosition.findIndex((item, index) => index !== 0 && isEqualPattern(item, head))\r\n    if (indexFind > 0) return true\r\n    return false\r\n}\r\n\r\nexport const isEqualPattern = (pattern1 = dPattern, pattern2 = dPattern) => {\r\n    return pattern1.x === pattern2.x && pattern1.y === pattern2.y\r\n}\r\n\r\nexport const indexOfPattern = (patternSearch = dPattern, allPattern = []) => {\r\n    return allPattern.findIndex((item) => isEqualPattern(item, patternSearch))\r\n}\r\n\r\nexport const followingHeader = (headerPosition = dPattern, snakePosition = [], boardSize, setSnakePosition = dFunc) => {\r\n    let snakePositionTemp = [...snakePosition]\r\n    for(let i = snakePositionTemp.length; i > 1; i--) {\r\n        snakePositionTemp[i - 1] = {\r\n            x: snakePositionTemp[i - 2].x,\r\n            y: snakePositionTemp[i - 2].y,\r\n        }\r\n    }\r\n    snakePositionTemp[0].x = headerPosition.x\r\n    snakePositionTemp[0].y = headerPosition.y\r\n    if (snakePositionTemp[0].x >= boardSize) {\r\n        snakePositionTemp[0].x = 0\r\n    } else if (snakePositionTemp[0].x < 0) {\r\n        snakePositionTemp[0].x = boardSize - 1\r\n    } else if (snakePositionTemp[0].y >= boardSize) {\r\n        snakePositionTemp[0].y = 0\r\n    } else if (snakePositionTemp[0].y < 0) {\r\n        snakePositionTemp[0].y = boardSize - 1\r\n    }\r\n\r\n    setSnakePosition([...snakePositionTemp])\r\n}\r\n\r\nexport const followingTail = (move = dPattern, snakePosition = [], boardSize, setSnakePosition = dFunc) => {\r\n    let snakePositionTemp = [...snakePosition]\r\n    for(let i = 0; i < snakePositionTemp.length - 1; i++) {\r\n        snakePositionTemp[i] = {\r\n            x: snakePositionTemp[i + 1].x,\r\n            y: snakePositionTemp[i + 1].y,\r\n        }\r\n    }\r\n    let last = snakePositionTemp.length - 1\r\n    snakePositionTemp[last].x += move.x\r\n    snakePositionTemp[last].y += move.y\r\n    if (snakePositionTemp[last].x >= boardSize) {\r\n        snakePositionTemp[last].x = 0\r\n    } else if (snakePositionTemp[last].x < 0) {\r\n        snakePositionTemp[last].x = boardSize - 1\r\n    } else if (snakePositionTemp[last].y >= boardSize) {\r\n        snakePositionTemp[last].y = 0\r\n    } else if (snakePositionTemp[last].y < 0) {\r\n        snakePositionTemp[last].y = boardSize - 1\r\n    }\r\n\r\n    setSnakePosition([...snakePositionTemp])\r\n}\r\n\r\nexport const movingSnake = (\r\n    snakePosition = dPattern, \r\n    moveX = 0, \r\n    moveY = 0, \r\n    foodPositionX = 0, \r\n    foodPositionY = 0, \r\n    boardSize = 0, \r\n    setSnakePosition = dFunc, \r\n    setFoodPosition = dFunc\r\n    ) => {\r\n        \r\n    let snakePositionTemp = snakePosition\r\n    const setSnakePositionTemp = (data) => snakePositionTemp = data\r\n \r\n    let newMove = {\r\n        x: snakePositionTemp[0].x + moveX,\r\n        y: snakePositionTemp[0].y + moveY,\r\n    }\r\n\r\n    followingHeader(newMove, snakePositionTemp, boardSize, setSnakePositionTemp)\r\n \r\n    if (checkEatTarget(snakePositionTemp, {x: foodPositionX, y: foodPositionY})) \r\n        doEatFood(snakePositionTemp, {x: moveX, y: moveY}, boardSize, setFoodPosition, setSnakePosition)\r\n    \r\n    \r\n    let eatBody = snakePositionTemp.find((item, index) => index !== 0 && item.x === snakePositionTemp[0].x && item.y === snakePositionTemp[0].y)\r\n    if (eatBody) {\r\n        snakePositionTemp = [{\r\n            x: 0,\r\n            y: 0\r\n        }]\r\n        setSnakePosition([...snakePositionTemp])\r\n    } else {\r\n        setSnakePosition([...snakePositionTemp])\r\n    }\r\n}\r\n\r\nexport const controlMove = (e, moveX, moveY, setMoveX, setMoveY) => {\r\n    switch(e.keyCode) {\r\n        case 38:\r\n        case 87:\r\n            if (moveY !== 1) {\r\n                setMoveX(0)\r\n                setMoveY(-1)\r\n            }\r\n            break;\r\n        case 37:\r\n        case 65:\r\n            if (moveX !== 1) {\r\n                setMoveX(-1)\r\n                setMoveY(0)\r\n            }\r\n            break\r\n        case 40:\r\n        case 83:\r\n            if (moveY !== -1) {\r\n                setMoveX(0)\r\n                setMoveY(1)\r\n            }\r\n            break;\r\n        case 39:\r\n        case 68:\r\n            if (moveX !== -1) {\r\n                setMoveX(1)\r\n                setMoveY(0)\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nexport const checkPositionSnake = ( positionX = 0, positionY = 0, result = 'active', snakePositionForRender = [], setSnakePositionForRender = () => {}) => {\r\n    const snakePositionForRenderTemp = [...snakePositionForRender]\r\n    if (snakePositionForRenderTemp.length === 0) return false\r\n    let check = false\r\n    for (let i = 0; i < snakePositionForRenderTemp.length; i ++) {\r\n        if (check !== false) break\r\n        if (positionX === snakePositionForRenderTemp[i].x && positionY === snakePositionForRenderTemp[i].y) {\r\n            check = i\r\n        }\r\n    }\r\n    if (check !== false) {\r\n        snakePositionForRenderTemp.splice(check, 1)\r\n        setSnakePositionForRender(snakePositionForRenderTemp)\r\n        return result\r\n    } else {\r\n        return \"\"\r\n    }\r\n}\r\n\r\nexport const generateFoodPosition = (snakePosition, boardSize) => {\r\n    const foodPosition = {\r\n        x: Math.floor(Math.random() * boardSize),\r\n        y: Math.floor(Math.random() * boardSize),\r\n    }\r\n\r\n    const findPositionSame = snakePosition.findIndex((item) => item.x === foodPosition.x && item.y === foodPosition.y)\r\n\r\n    if (findPositionSame >= 0) {\r\n        return generateFoodPosition(snakePosition, boardSize)\r\n    } else {\r\n        return foodPosition\r\n    }\r\n}\r\n\r\nexport const getMoveExcept = (visitedPosition = [], headSnake = dPattern) => {\r\n    let { x: headSnakeX, y: headSnakeY } = headSnake\r\n    let headSnakeTemp = {x: headSnakeX, y: headSnakeY}\r\n    let except = false\r\n    let index \r\n    for(let i = 0; i < 4; i++) {\r\n        if (i === 0)\r\n            headSnakeTemp = {x: headSnakeX + 1, y: headSnakeY}\r\n        else if (i === 1)\r\n            headSnakeTemp = {x: headSnakeX - 1, y: headSnakeY}\r\n        else if (i === 2)\r\n            headSnakeTemp = {x: headSnakeX, y: headSnakeY + 1}\r\n        else if (i === 3)\r\n            headSnakeTemp = {x: headSnakeX, y: headSnakeY - 1}\r\n\r\n        // eslint-disable-next-line no-loop-func\r\n        index = visitedPosition.findIndex((item) => isEqualPattern(item, headSnakeTemp))\r\n        if (index === -1) {\r\n            except = true\r\n            break\r\n        }\r\n    }\r\n    if (except) return headSnakeTemp\r\n    return null \r\n}\r\n\r\nexport const checkOutsideBoardSize = (position = dPattern, boardSize) => {\r\n    boardSize -= 1\r\n    return (position.x > boardSize) || (position.y > boardSize) || (position.x < 0) || (position.y < 0)\r\n}\r\n\r\nexport const moveNext = (headPosition, foodPosition, snakePosition, boardSize) => {\r\n    if (headPosition.x === foodPosition.x && headPosition.y === foodPosition.y) return headPosition\r\n    const moveXP1 = Object.assign({}, headPosition, { x: headPosition.x + 1 })\r\n    const moveXM1 = Object.assign({}, headPosition, { x: headPosition.x - 1 })\r\n    const moveYP1 = Object.assign({}, headPosition, { y: headPosition.y + 1 })\r\n    const moveYM1 = Object.assign({}, headPosition, { y: headPosition.y - 1 })\r\n    let nextMove\r\n    let nextMoveReverse\r\n\r\n    const moveXNextDefault = () => {\r\n        if (headPosition.x > foodPosition.x) return moveXM1 \r\n        else return moveXP1\r\n    }\r\n\r\n    const moveXNextDefaultReverse = () => {\r\n        if (headPosition.x < foodPosition.x) return moveXM1 \r\n        else return moveXP1\r\n    }\r\n\r\n    const moveYNextDefault = () => {\r\n        if (headPosition.y > foodPosition.y) return moveYM1\r\n        else return moveYP1\r\n    }\r\n    \r\n    const moveYNextDefaultReverse = () => {\r\n        if (headPosition.y < foodPosition.y) return moveYM1\r\n        else return moveYP1\r\n    }\r\n\r\n    const moveXNext = () => {\r\n        if (headPosition.x > foodPosition.x) {\r\n            if (indexOfPattern(incrementPattern(headPosition, gameEnums.X, -1), snakePosition) >= 0) return moveXP1\r\n            return moveXM1\r\n        } \r\n        else if (headPosition.x < foodPosition.x) {\r\n            if (indexOfPattern(incrementPattern(headPosition, gameEnums.X, 1), snakePosition) >= 0) return moveXM1\r\n            return moveXP1\r\n        }\r\n        else if (indexOfPattern(incrementPattern(headPosition, gameEnums.X, -1), snakePosition) >= 0) return moveXP1\r\n        else return moveXM1\r\n    }\r\n\r\n    const moveYNext = () => {\r\n        if (headPosition.y > foodPosition.y) {\r\n            if (indexOfPattern(incrementPattern(headPosition, gameEnums.Y, -1), snakePosition) >= 0) return moveYP1\r\n            return moveYM1\r\n        }\r\n        else if (indexOfPattern(incrementPattern(headPosition, gameEnums.Y, 1), snakePosition) >= 0) return moveYM1\r\n        else return moveYP1\r\n    }\r\n    \r\n    if (headPosition.y === foodPosition.y) {\r\n        nextMove = moveXNext()\r\n        if (checkOutsideBoardSize(nextMove, boardSize)) return moveYNext()\r\n        if (snakePosition.length > 1 && indexOfPattern(nextMove, snakePosition) >= 0) return moveYNext()\r\n        return nextMove\r\n    }\r\n    else if (headPosition.x === foodPosition.x) {\r\n        nextMove = moveYNext()\r\n        if (checkOutsideBoardSize(nextMove, boardSize)) return moveXNext()\r\n        else if (snakePosition.length > 1 && indexOfPattern(nextMove, snakePosition) >= 0) return moveXNext()\r\n        return nextMove\r\n    }\r\n    else {\r\n        let gapX = Math.abs(headPosition.x - foodPosition.x)\r\n        let gapY = Math.abs(headPosition.y - foodPosition.y)\r\n        if (gapX <= gapY) {\r\n            nextMove = moveXNextDefault()\r\n            if (snakePosition.length > 1 && indexOfPattern(nextMove, snakePosition) >= 0) {\r\n                nextMoveReverse = moveXNextDefaultReverse()\r\n                nextMove = moveXNextDefault()\r\n                if (snakePosition.length > 1) \r\n                    if (indexOfPattern(nextMove, snakePosition) >= 0)\r\n                        if (indexOfPattern(nextMoveReverse, snakePosition) === -1 && !checkOutsideBoardSize(nextMoveReverse, boardSize)) \r\n                            return nextMoveReverse\r\n                return moveYNext()\r\n            }\r\n            return nextMove\r\n        }\r\n        else if (gapX >= gapY) {\r\n            nextMove = moveYNextDefault()\r\n            if (snakePosition.length > 1 && indexOfPattern(nextMove, snakePosition) >= 0) {\r\n                nextMoveReverse = moveYNextDefaultReverse()\r\n                nextMove = moveXNextDefault()\r\n                if (snakePosition.length > 1)\r\n                    if (indexOfPattern(nextMove, snakePosition) >= 0)\r\n                        if (indexOfPattern(nextMoveReverse, snakePosition) === -1 && !checkOutsideBoardSize(nextMoveReverse, boardSize)) \r\n                            return nextMoveReverse\r\n                return moveXNext()\r\n            }\r\n            return nextMove\r\n        }\r\n    }\r\n}","const ActionEnums = Object.freeze({\r\n    APP_STATE_SET_START_GAME: \"APP_STATE_SET_START_GAME\",\r\n    GAME_STATE_SET_BOARD_SIZE: \"GAME_STATE_SET_BOARD_SIZE\",\r\n    GAME_STATE_SET_FOOD_POSITION: \"GAME_STATE_SET_FOOD_POSITION\",\r\n    GAME_STATE_SET_SNAKE_POSITION: \"GAME_STATE_SET_SNAKE_POSITION\",\r\n});\r\n\r\nexport default ActionEnums;","import actionEnums from \"../../enums/actionEnums\"\r\n\r\nexport const setStartGame = (startGame) => ({\r\n    type: actionEnums.APP_STATE_SET_START_GAME, startGame\r\n})","import actionEnums from \"../../enums/actionEnums\"\r\nimport { dPattern } from \"../../helpers/gameSnakeHelpers\"\r\n\r\n\r\nexport const setBoarSize = (boardSize = 10) => ({\r\n    type: actionEnums.GAME_STATE_SET_BOARD_SIZE, boardSize\r\n})\r\n\r\nexport const setFoodPosition = (foodPosition = dPattern) => ({\r\n    type: actionEnums.GAME_STATE_SET_FOOD_POSITION, foodPosition\r\n})\r\n\r\nexport const setSnakePosition = (snakePosition = []) => ({\r\n    type: actionEnums.GAME_STATE_SET_SNAKE_POSITION, snakePosition\r\n})\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { range } from \"../helpers/dataHelpers\"\r\nimport { checkEatTarget, controlMove, doEatFood, generateGrid, dPattern, gapPattern, followingHeader, checkEatBody, moveNext, generateFoodPosition, getMoveExcept, patternToString, indexOfPattern, followingTail } from \"../helpers/gameSnakeHelpers\"\r\nimport * as appStateAction from \"../stores/actions/appStateAction\"\r\nimport * as gameStateAction from \"../stores/actions/gameStateAction\"\r\nimport { connect } from \"react-redux\"\r\nimport { bindActionCreators } from \"redux\"\r\nimport \"./BoardComponent.scss\"\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        boardSize: state.gameState.boardSize,\r\n        foodPosition: state.gameState.foodPosition,\r\n        snakePosition: state.gameState.snakePosition,\r\n        startGame: state.appState.startGame,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        appStateAction: bindActionCreators(appStateAction, dispatch),\r\n        gameStateAction: bindActionCreators(gameStateAction, dispatch),\r\n    }\r\n}\r\n\r\nconst BoardComponent = (props) => {\r\n    const [boardSize, setBoardSize] = useState(props.boardSize)\r\n    const timerInterval = props.timerInterval\r\n    const [moveX, setMoveX] = useState(1)\r\n    const [moveY, setMoveY] = useState(0)\r\n    const [history, setHistory] = useState([])\r\n    const [levelEat, setLevelEat] = useState(0)\r\n    const styleBoardContainer = generateGrid(boardSize)\r\n\r\n    const [snakePosition, setSnakePosition] = useState(props.snakePosition)\r\n\r\n    const [foodPosition, setFoodPosition] = useState(props.foodPosition)\r\n\r\n    useEffect(() => {\r\n        let obj = {\r\n            startGame: true,\r\n            snakePosition: props.snakePosition,\r\n            foodPosition: props.foodPosition,\r\n        }\r\n        if (props.startGame) {\r\n            dfsStep(obj)\r\n        }\r\n        \r\n        return () => {\r\n            obj.startGame = false\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.startGame, levelEat])\r\n\r\n    useEffect(() => {\r\n        if (!props.startGame) {\r\n            setBoardSize(props.boardSize)\r\n            setSnakePosition([dPattern])\r\n            setFoodPosition(generateFoodPosition([dPattern], props.boardSize))\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.boardSize])\r\n\r\n    useEffect(() => {\r\n        if (!props.startGame) {\r\n            setFoodPosition(props.foodPosition)\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.foodPosition])\r\n\r\n    useEffect(() => {\r\n        if (!props.startGame) {\r\n            setSnakePosition(props.snakePosition)\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.snakePosition])\r\n\r\n    const snakePositionForRender = [...snakePosition]\r\n\r\n    const checkPositionSnake = ( positionX = 0, positionY = 0, result = 'active') => {\r\n        if (snakePositionForRender.length === 0) return false\r\n        let check = false\r\n        for (let i = 0; i < snakePositionForRender.length; i ++) {\r\n            if (check !== false) break\r\n            if (positionX === snakePositionForRender[i].x && positionY === snakePositionForRender[i].y) check = i\r\n        }\r\n        if (check !== false) {\r\n            if (snakePosition[0].x === snakePositionForRender[check].x && snakePosition[0].y === snakePositionForRender[check].y)\r\n                result =  result + 'Head'\r\n            snakePositionForRender.splice(check, 1)\r\n            return result\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n\r\n    const dfsStep = (data) => {\r\n        \r\n        let interval\r\n        let step = []\r\n        let visited = []\r\n        let move = dPattern\r\n        let moveAll = []\r\n        let snakePositionTemp = data.snakePosition.map((item) => Object.assign({}, item))\r\n        let snakePositionOriginal = data.snakePosition.map((item) => Object.assign({}, item))\r\n        let foodPositionTemp = {...foodPosition}\r\n        let historyTemp = [...history]\r\n        let eatFood = false\r\n        let nextStep\r\n        let allStep = []\r\n        let currentPosition \r\n        // ----------------------------------------------------\r\n\r\n        const setSnakePositionTemp = (data) => snakePositionTemp = data\r\n        const setSnakePositionOriginal = (data) => snakePositionOriginal = data\r\n        const setFoodPositionTemp = (data) => foodPositionTemp = data\r\n        const prevStep = () => {\r\n            const movingPrev = moveAll.pop()\r\n            followingTail(movingPrev, snakePositionTemp, boardSize, setSnakePositionTemp)\r\n            step.pop()\r\n        }\r\n\r\n        while (!eatFood) {\r\n            currentPosition = patternToString(snakePositionTemp[0])\r\n            if (!visited[currentPosition]) {\r\n                visited[currentPosition] = []\r\n                nextStep = moveNext(snakePositionTemp[0], foodPositionTemp, snakePositionTemp, boardSize)\r\n            } else {\r\n                if (visited[currentPosition].length === 4) {\r\n                    prevStep()\r\n                    continue\r\n                }\r\n                nextStep = getMoveExcept(visited[currentPosition], snakePositionTemp[0])\r\n                if (!nextStep) {\r\n                    prevStep()\r\n                    continue\r\n                }\r\n\r\n            }\r\n            visited[currentPosition].push(Object.assign({}, nextStep))\r\n            \r\n            // console.log(\"indexOfPattern\", nextStep, [...snakePositionTemp])\r\n            if (indexOfPattern(nextStep, snakePositionTemp) >= 0) {\r\n                continue\r\n            }\r\n            move = gapPattern(snakePositionTemp[0], nextStep)\r\n            moveAll.push(Object.assign({}, move))\r\n            step.push(nextStep)\r\n            allStep.push([...step].map((item) => Object.assign({}, item)))\r\n            followingHeader(nextStep, snakePositionTemp, boardSize, setSnakePositionTemp)\r\n            \r\n            if (checkEatTarget(snakePositionTemp, foodPositionTemp)) {\r\n                eatFood = true\r\n                continue\r\n            }\r\n        }\r\n\r\n        // console.log(\"failed ?\", failed, JSON.stringify(step))\r\n        // console.log(\"allStep ?\", JSON.stringify(allStep))\r\n        const { gameStateAction } = props\r\n\r\n        const setDefault = () => {\r\n            const newSnake = [...snakePositionOriginal]\r\n            const newFood = {...foodPositionTemp}\r\n            if (historyTemp.length > 5) historyTemp.shift()\r\n            setHistory([...historyTemp, {\r\n                snakePosition: newSnake,\r\n                foodPosition: newFood,\r\n            }])\r\n            console.log(`history`, JSON.stringify(historyTemp))\r\n            setSnakePosition(newSnake)\r\n            setFoodPosition(newFood)\r\n            gameStateAction.setSnakePosition(newSnake)\r\n            gameStateAction.setFoodPosition(newFood)\r\n            setLevelEat(levelEat + 1)\r\n        }\r\n\r\n        interval = setInterval(() => {\r\n            if (data.startGame === false) {\r\n                clearInterval(interval)\r\n                setDefault()\r\n                console.log(\"snakePosition\", JSON.stringify([...snakePositionOriginal]), JSON.stringify(foodPositionTemp))\r\n                return \r\n            }\r\n            const [ movingNext ] = step\r\n            step.shift()\r\n\r\n            if (movingNext) {\r\n                followingHeader(movingNext, snakePositionOriginal, boardSize, setSnakePositionOriginal)\r\n                setSnakePosition([...snakePositionOriginal])\r\n                if (checkEatBody(snakePositionOriginal)) {\r\n                    clearInterval(interval)\r\n                    setDefault()\r\n                }\r\n            }\r\n            if (step.length === 0) {\r\n               \r\n                clearInterval(interval)\r\n                doEatFood(snakePositionOriginal, move, boardSize, setFoodPositionTemp, setSnakePositionOriginal)\r\n                setDefault()\r\n            }\r\n        }, timerInterval)\r\n    }\r\n\r\n    const checkPositionFood = ( positionX = 0, positionY = 0, result = 'foodActive') => {\r\n        let check = false\r\n        if (positionX === foodPosition.x && positionY === foodPosition.y) {\r\n            check = true\r\n        }\r\n        if (check !== false) {\r\n            return result\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div \r\n            onKeyDown={(e) => controlMove(e, moveX, moveY, setMoveX, setMoveY)}\r\n            className=\"board-component-container\" \r\n            style={styleBoardContainer}\r\n            tabIndex=\"0\"\r\n        >\r\n            {range(boardSize).map((indexY) => {\r\n                return range(boardSize).map((indexX) => {\r\n                    return (\r\n                        <div\r\n                            key={`board-item-${indexX}-${indexY}`} \r\n                            className={`board-item ${checkPositionSnake(indexX, indexY)} ${checkPositionFood(indexX, indexY)}`}\r\n                        >\r\n                            {/* <div>x: {indexX}</div>\r\n                            <div>y: {indexY}</div> */}\r\n                        </div>\r\n                    )\r\n                })\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(BoardComponent))","import React from \"react\"\r\nimport \"./BoardContainer.scss\"\r\n\r\nconst BoardContainer = (props) => {\r\n    return (\r\n        <div className=\"board-container\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(BoardContainer)","import { batch } from \"react-redux\"\r\nimport { dPattern, generateFoodPosition } from \"../../../helpers/gameSnakeHelpers\"\r\nimport * as gameStateAction from \"../gameStateAction\"\r\n\r\nexport const restartGame = () => {\r\n    return (dispatch, getState) => {\r\n        const state = getState()\r\n        const { gameState } = state\r\n        if (!gameState.startGame) {\r\n            batch(() => {\r\n                const generatedFoodPosition = generateFoodPosition([dPattern], gameState.boardSize)\r\n                const snakePosition = [dPattern]\r\n                dispatch(gameStateAction.setFoodPosition(generatedFoodPosition))\r\n                dispatch(gameStateAction.setSnakePosition(snakePosition))\r\n            })\r\n        }\r\n    }\r\n}","import React from \"react\"\r\nimport \"./InputRange.scss\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst  InputRange = (props) => {\r\n    return (\r\n        <div className=\"range-array\">\r\n            <div className=\"input-container\">\r\n                <input \r\n                    type=\"range\"\r\n                    disabled={props.disabled}\r\n                    min={props.min} \r\n                    max={props.max}\r\n                    value={props.value}\r\n                    onChange={props.onChange}\r\n                />\r\n                <input \r\n                    className=\"input-text\"\r\n                    disabled={props.disabled}\r\n                    type=\"text\"  \r\n                    value={props.value}\r\n                    onChange={props.onChange}\r\n                />\r\n            </div>\r\n            {props.label && props.label.length && <label>{props.label}</label>}\r\n        </div>\r\n    )\r\n}\r\n\r\nInputRange.propTypes = {\r\n    disabled: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    value: PropTypes.any,\r\n    max: PropTypes.number,\r\n    min: PropTypes.number,\r\n    onChange: PropTypes.func,\r\n}\r\n\r\nexport default React.memo(InputRange)","import React from \"react\"\r\nimport \"./BoardHeader.scss\"\r\nimport { Button } from 'react-bootstrap'\r\nimport * as appStateAction from \"../stores/actions/appStateAction\"\r\nimport * as gameBusinessAction from \"../stores/actions/business/gameBusinessAction\"\r\nimport * as gameStateAction from \"../stores/actions/gameStateAction\"\r\nimport { connect } from \"react-redux\"\r\nimport { bindActionCreators } from \"redux\"\r\nimport InputRange from \"../components/inputs/InputRange\"\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        startGame: state.appState.startGame,\r\n        boardSize: state.gameState.boardSize\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        appStateAction: bindActionCreators(appStateAction, dispatch),\r\n        gameBusinessAction: bindActionCreators(gameBusinessAction, dispatch),\r\n        gameStateAction: bindActionCreators(gameStateAction, dispatch),\r\n    }\r\n}\r\n\r\nconst BoardHeader = (props) => {\r\n    const startStopGame = () => {\r\n        const { appStateAction, startGame } = props\r\n        appStateAction.setStartGame(!startGame)\r\n    }\r\n\r\n    const restartGame = () => {\r\n        const { gameBusinessAction, startGame } = props\r\n        if (!startGame) {\r\n            gameBusinessAction.restartGame()\r\n        }\r\n    }\r\n\r\n    const onChangeBoardSize = (e) => {\r\n        const { gameStateAction } = props\r\n        gameStateAction.setBoarSize(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"board-header\">\r\n            <div className=\"board-size-control\">\r\n                <div className=\"text-content\">\r\n                    Board Size\r\n                </div>\r\n                <InputRange \r\n                    disabled={props.startGame}\r\n                    value={props.boardSize} \r\n                    min={3}\r\n                    max={100}\r\n                    onChange={onChangeBoardSize} \r\n                />\r\n            </div>\r\n            <Button \r\n                className=\"start-button\" \r\n                onClick={startStopGame}\r\n            >\r\n                {props.startGame ? \"Stop\" : \"Start\"}\r\n            </Button>\r\n            <Button \r\n                disabled={props.startGame}\r\n                className=\"restart-button\" \r\n                onClick={restartGame}\r\n            >\r\n                Restart Game\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(BoardHeader))","import React from 'react';\nimport './App.css';\nimport BoardComponentGeneral from './game/BoardComponentGeneral';\nimport BoardContainer from './game/BoardContainer';\nimport BoardHeader from './game/BoardHeader';\n\nfunction App() {\n\n  const timerInterval = 200\n\n  return (\n    <div className=\"App\">\n      <BoardContainer>\n        <BoardHeader/>\n        <BoardComponentGeneral\n          timerInterval={timerInterval}\n        />\n      </BoardContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import actionEnums from \"../../enums/actionEnums\"\r\n\r\nconst init = {\r\n    startGame: false\r\n}\r\n\r\nconst appState = (state = init, action) => {\r\n    switch (action.type) {\r\n        case actionEnums.APP_STATE_SET_START_GAME:\r\n            return Object.assign({}, state, { startGame: action.startGame})\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default appState","import actionEnums from \"../../enums/actionEnums\"\r\n// import { dPattern } from \"../../helpers/gameSnakeHelpers\";\r\n\r\nconst init = {\r\n    boardSize: 15,\r\n    // foodPosition: Object.assign({}, dPattern, {x: 4, y: 4}),\r\n    foodPosition: {\r\n        \"x\": 5,\r\n        \"y\": 5\r\n    },\r\n    // snakePosition: [dPattern],\r\n    snakePosition: [\r\n        {\r\n          \"x\": 0,\r\n          \"y\": 0\r\n        }\r\n    ],\r\n}\r\n\r\nconst appState = (state = init, action) => {\r\n    switch (action.type) {\r\n        case actionEnums.GAME_STATE_SET_BOARD_SIZE:\r\n            return Object.assign({}, state, { boardSize: action.boardSize})\r\n        case actionEnums.GAME_STATE_SET_FOOD_POSITION:\r\n            return Object.assign({}, state, { foodPosition: action.foodPosition})\r\n        case actionEnums.GAME_STATE_SET_SNAKE_POSITION:\r\n            return Object.assign({}, state, { snakePosition: action.snakePosition})\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default appState","import { combineReducers } from 'redux';\r\n\r\n// New ------------------------------------------------------\r\nimport appState from './appState';\r\nimport gameState from './gameState';\r\n\r\nexport default combineReducers({\r\n    appState,\r\n    gameState,\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport rootStore from './stores/reducers';\nlet store = createStore(rootStore, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}